// <auto-generated />
using System;
using COMPTOIR.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace COMPTOIR.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230221142735_ticket-update2102")]
    partial class ticketupdate2102
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChannelCategoryTax", b =>
                {
                    b.Property<int>("ChannelCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TaxesId")
                        .HasColumnType("int");

                    b.HasKey("ChannelCategoriesId", "TaxesId");

                    b.HasIndex("TaxesId");

                    b.ToTable("ChannelCategoryTax");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PositionX")
                        .HasColumnType("int");

                    b.Property<int?>("PositionY")
                        .HasColumnType("int");

                    b.Property<int?>("Rotation")
                        .HasColumnType("int");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ChannelCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMiniPos")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("ChannelCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address01")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address02")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address03")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address04")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address05")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber01")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber02")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber03")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber04")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber05")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LoyalityLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ExtraProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketRecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TicketRecipeId");

                    b.ToTable("ExtraProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ExtraProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExtraProductCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Places");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.PlaceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsAmountIgnored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCook")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlaceCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaw")
                        .HasColumnType("bit");

                    b.Property<string>("Manifacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UnitName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ProductSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGarbage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AcceptedMargin")
                        .HasColumnType("float");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Viceversa")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.HasIndex("ProductId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.RecipeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CaptainId")
                        .HasColumnType("int");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CurrentDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("DoneBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVip")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RefTicketId")
                        .HasColumnType("int");

                    b.Property<string>("ServedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPaidAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CanceledBy");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveredBy");

                    b.HasIndex("DoneBy");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("LastUpdateBy");

                    b.HasIndex("ServedBy");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TicketRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsServed")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketRecipes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TicketTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaxId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketTaxes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BillImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("FromPlaceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PayReceiveAmount")
                        .HasColumnType("float");

                    b.Property<double?>("ProductAmount")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductUnitCost")
                        .HasColumnType("float");

                    b.Property<double?>("RecipeCount")
                        .HasColumnType("float");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ToPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("ValidOn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("CategoryName");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromPlaceId");

                    b.HasIndex("IssuedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToPlaceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TransactionCategory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPayment")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPos")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsViceversa")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TransactionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Unit", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("COMPTOIR.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlacePlace", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("ClientsId", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("PlacePlace");
                });

            modelBuilder.Entity("ChannelCategoryTax", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.ChannelCategory", null)
                        .WithMany()
                        .HasForeignKey("ChannelCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMPTOIR.Models.AppModels.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Channel", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.ChannelCategory", "Category")
                        .WithMany("Channels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ChannelCategory", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Place", "Place")
                        .WithMany("ChannelCategories")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ExtraProduct", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.ExtraProductCategory", "Category")
                        .WithMany("ExtraProducts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("COMPTOIR.Models.AppModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("COMPTOIR.Models.AppModels.Recipe", "Recipe")
                        .WithMany("ExtraProducts")
                        .HasForeignKey("RecipeId");

                    b.HasOne("COMPTOIR.Models.AppModels.TicketRecipe", null)
                        .WithMany("ExtraProducts")
                        .HasForeignKey("TicketRecipeId");

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Place", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.PlaceCategory", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Product", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.ProductSubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMPTOIR.Models.AppModels.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitName");

                    b.Navigation("SubCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ProductSubCategory", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.ProductCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Recipe", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Place", "Place")
                        .WithMany("Recipes")
                        .HasForeignKey("PlaceId");

                    b.HasOne("COMPTOIR.Models.AppModels.Product", "Product")
                        .WithMany("Recipes")
                        .HasForeignKey("ProductId");

                    b.Navigation("Place");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.RecipeProduct", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("COMPTOIR.Models.AppModels.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Ticket", b =>
                {
                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "CanceledUser")
                        .WithMany()
                        .HasForeignKey("CanceledBy");

                    b.HasOne("COMPTOIR.Models.AppModels.Channel", "Channel")
                        .WithMany("Tickets")
                        .HasForeignKey("ChannelId");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "ConfirmedUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy");

                    b.HasOne("COMPTOIR.Models.AppModels.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "DeliveredUser")
                        .WithMany()
                        .HasForeignKey("DeliveredBy");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "DoneUser")
                        .WithMany()
                        .HasForeignKey("DoneBy");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "IssuedUser")
                        .WithMany()
                        .HasForeignKey("IssuedBy");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "LastUpdateUser")
                        .WithMany()
                        .HasForeignKey("LastUpdateBy");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "ServedUser")
                        .WithMany()
                        .HasForeignKey("ServedBy");

                    b.Navigation("CanceledUser");

                    b.Navigation("Channel");

                    b.Navigation("ConfirmedUser");

                    b.Navigation("Customer");

                    b.Navigation("DeliveredUser");

                    b.Navigation("DoneUser");

                    b.Navigation("IssuedUser");

                    b.Navigation("LastUpdateUser");

                    b.Navigation("ServedUser");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TicketRecipe", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");

                    b.HasOne("COMPTOIR.Models.AppModels.Ticket", "Ticket")
                        .WithMany("TicketRecipes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TicketTax", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Tax", "Tax")
                        .WithMany("Tickets")
                        .HasForeignKey("TaxId");

                    b.HasOne("COMPTOIR.Models.AppModels.Ticket", "Ticket")
                        .WithMany("Taxes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tax");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Transaction", b =>
                {
                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "CancelledUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy");

                    b.HasOne("COMPTOIR.Models.AppModels.TransactionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "ConfirmedUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy");

                    b.HasOne("COMPTOIR.Models.AppModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("COMPTOIR.Models.AppModels.Place", "FromPlace")
                        .WithMany()
                        .HasForeignKey("FromPlaceId");

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", "IssuedUser")
                        .WithMany()
                        .HasForeignKey("IssuedBy");

                    b.HasOne("COMPTOIR.Models.AppModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("COMPTOIR.Models.AppModels.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");

                    b.HasOne("COMPTOIR.Models.AppModels.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("TicketId");

                    b.HasOne("COMPTOIR.Models.AppModels.Place", "ToPlace")
                        .WithMany()
                        .HasForeignKey("ToPlaceId");

                    b.Navigation("CancelledUser");

                    b.Navigation("Category");

                    b.Navigation("ConfirmedUser");

                    b.Navigation("Customer");

                    b.Navigation("FromPlace");

                    b.Navigation("IssuedUser");

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("Ticket");

                    b.Navigation("ToPlace");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TransactionProduct", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("COMPTOIR.Models.AppModels.Transaction", "Transaction")
                        .WithMany("TransactionProducts")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("COMPTOIR.Models.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("COMPTOIR.Models.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("COMPTOIR.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlacePlace", b =>
                {
                    b.HasOne("COMPTOIR.Models.AppModels.Place", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMPTOIR.Models.AppModels.Place", null)
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Channel", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ChannelCategory", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ExtraProductCategory", b =>
                {
                    b.Navigation("ExtraProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Place", b =>
                {
                    b.Navigation("ChannelCategories");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.PlaceCategory", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Product", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ProductCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.ProductSubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Recipe", b =>
                {
                    b.Navigation("ExtraProducts");

                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Tax", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Ticket", b =>
                {
                    b.Navigation("Taxes");

                    b.Navigation("TicketRecipes");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.TicketRecipe", b =>
                {
                    b.Navigation("ExtraProducts");
                });

            modelBuilder.Entity("COMPTOIR.Models.AppModels.Transaction", b =>
                {
                    b.Navigation("TransactionProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
